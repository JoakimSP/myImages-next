generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model images {
  id       Int    @id @default(autoincrement())
  filename String @db.VarChar(255)
  category String @db.VarChar(255)
}

model photographer {
  personID             String                 @id @unique @default(cuid())
  user                 String                 @unique @default("") @db.VarChar(255)
  profilepicture       String                 @default("") @db.VarChar(255)
  heropicture          String                 @default("") @db.VarChar(255)
  firstName            String                 @default("") @db.VarChar(255)
  lastName             String                 @default("") @db.VarChar(255)
  email                String                 @unique @default("") @db.VarChar(255)
  password             String                 @default("") @db.VarChar(255)
  role                 String                 @default("user")
  info                 photographerinfo?
  photos               photos[]
  collection           collection[]
  ExclusiveCollections exclusivecollections[]
}

model photographerinfo {
  personID        String       @id @unique(map: "photographerInfo_personID_key") @default(cuid())
  country         String?      @db.VarChar(255)
  city            String?      @db.VarChar(255)
  about           String?      @db.VarChar(255)
  camera          String?      @db.VarChar(255)
  lens            String?      @db.VarChar(255)
  favoritePhoto   String?      @db.VarChar(255)
  photoPreference String?      @db.VarChar(255)
  careerStart     String?      @db.VarChar(255)
  cardText        String?      @db.VarChar(255)
  heroText        String?      @db.LongText
  photographer    photographer @relation(fields: [personID], references: [personID])
}

model photos {
  id              String                @id @default(cuid())
  personID        String
  title           String?
  description     String?               @db.LongText
  filename        String
  filetype        String
  filesize        Int
  filepath        String                @db.VarChar(250)
  folderpath      String                @db.VarChar(250)
  size            String
  dateTaken       DateTime?
  width           Int?
  height          Int?
  tags            Json?
  category        String?
  countViewd      Int?                  @default(0)
  countDownloaded Int?                  @default(0)
  price           Int?                  @default(100)
  commercialPrice Int?                  @default(0)
  privacy         Boolean               @default(true)
  photographer    photographer          @relation(fields: [personID], references: [personID])
  collection      collection?           @relation(fields: [collectionId], references: [id])
  collectionId    String?
  categories      categories?           @relation(fields: [categoriesId], references: [id])
  categoriesId    String?
  exclusive       Boolean               @default(false)
  active          Boolean               @default(true)
  Contact         contact?              @relation(fields: [contactId], references: [id])
  contactId       String?
  Exclusive       exclusivecollections? @relation(fields: [exclusiveId], references: [id])
  exclusiveId     String?
}

model cart {
  id           String  @id @default(cuid())
  photoID      String
  thumbnail    String?
  sessionEmail String
  priceoption  Int
}

model Receipt {
  id           String  @default(cuid())
  index        Int     @id @unique @default(autoincrement())
  photosID     Json
  sessionEmail String
  downloaded   Boolean @default(false)
  dateAdded    String
  price        Int
}

model categories {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  parentId    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  photos      photos[]
}

model collection {
  id                    String               @id @default(cuid())
  name                  String
  subtitle              String?
  description           String?              @db.LongText
  imagepathrelative     String               @db.VarChar(255)
  imagepath             String               @db.VarChar(255)
  imagepathfolder       String               @db.VarChar(255)
  parentId              Int?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  countViewd            Int?                 @default(0)
  sortOrder             Int?
  photos                photos[]
  photographer          photographer?        @relation(fields: [photographerPersonID], references: [personID])
  photographerPersonID  String?
  featuredcollections   featuredcollections? @relation(fields: [featuredcollectionsId], references: [id])
  featuredcollectionsId String?
}

model featuredcollections {
  id         String       @id @default("1")
  collection collection[]
  title      String?      @db.VarChar(255)
  subTitle   String?      @db.LongText
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model exclusivecollections {
  id                    String        @id @default("1")
  title                 String
  subtitle              String
  homepageTitle         String?
  homepageSubTitle      String?
  information           String?       @db.LongText
  heroImagepathrelative String        @db.VarChar(255)
  heroImagepath         String        @db.VarChar(255)
  heroImagepathfolder   String        @db.VarChar(255)
  photos                photos[]
  photographer          photographer? @relation(fields: [photographerPersonID], references: [personID])
  photographerPersonID  String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
}

model privacypolicy {
  id        String   @id @default("1")
  text      String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model legalnotice {
  id        String   @id @default("1")
  text      String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model photographerPage {
  id        String   @id @default("1")
  title     String   @db.LongText
  subtitle  String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model pricingpage {
  id                 String   @id @default("1")
  title              String   @db.VarChar(255)
  subtitle           String   @db.LongText
  imageUrlLeft       String   @db.VarChar(255)
  imageTitleLeft     String   @db.VarChar(255)
  imageSubTitleLeft  String   @db.LongText
  imagePriceLeft     String   @db.VarChar(255)
  imageUrlRight      String   @db.VarChar(255)
  imageTitleRight    String   @db.VarChar(255)
  imageSubTitleRight String   @db.LongText
  imagePriceRight    String   @db.VarChar(255)
  footerText         String   @db.LongText
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model pricingpageExclusive {
  id        String   @id @default("1")
  title     String   @db.VarChar(255)
  subtitle  String   @db.LongText
  image     String   @db.VarChar(255)
  text      String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model contact {
  id            String   @id @default(cuid())
  firstName     String
  lastName      String
  emailAddress  String
  businessPhone String
  company       String
  title         String
  country       String
  message       String   @db.LongText
  photos        photos[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model support {
  id        String   @id @default(cuid())
  question  String   @db.LongText
  answer    String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
